# Generated by Django 2.2.3 on 2019-11-29 12:27

import apps.authentication.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=50, verbose_name='First name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date joined')),
                ('is_staff', models.BooleanField(default=True, verbose_name='Is staff')),
                ('is_confirmed_email', models.BooleanField(default=False, verbose_name='Is confirm email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', apps.authentication.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', apps.authentication.managers.AdminUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Biller',
            fields=[
            ],
            options={
                'verbose_name': 'Biller',
                'verbose_name_plural': 'Billers',
                'permissions': [],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', apps.authentication.managers.BillerUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
            ],
            options={
                'verbose_name': 'Manager',
                'verbose_name_plural': 'Managers',
                'permissions': [],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', apps.authentication.managers.ManagerUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mechanic',
            fields=[
            ],
            options={
                'verbose_name': 'Mechanic',
                'verbose_name_plural': 'Mechanics',
                'permissions': [],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authentication.user',),
            managers=[
                ('objects', apps.authentication.managers.MechanicUserManager()),
            ],
        ),
    ]
